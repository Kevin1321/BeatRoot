//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/Input/BeatRootActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerActions
{
    public partial class @BeatRootActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BeatRootActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BeatRootActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""506c8c02-7de5-4a50-b019-e10e0f155af1"",
            ""actions"": [
                {
                    ""name"": ""SelectInstrumentNorth"",
                    ""type"": ""Button"",
                    ""id"": ""858961dd-7aa5-4b87-a4cf-08d419696267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectInstrumentSouth"",
                    ""type"": ""Button"",
                    ""id"": ""5764b230-4bc1-4873-b7cd-0f6eff00e283"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""858d0d12-d45d-4e0c-a71d-08d4c80efa64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartPause"",
                    ""type"": ""Button"",
                    ""id"": ""64ecbbfd-7d92-46cb-94f5-d2ce89ca40ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0735863b-890e-44f4-a6e6-d09ff300bbc7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectInstrumentNorth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d54287cb-c2b3-4f37-92e1-4ea45645ca33"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectInstrumentSouth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8533b48-a397-479e-9d44-6cdca15e6847"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b90b1c-8a05-4ca3-bfbc-2f1890dd99e3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_SelectInstrumentNorth = m_Player.FindAction("SelectInstrumentNorth", throwIfNotFound: true);
            m_Player_SelectInstrumentSouth = m_Player.FindAction("SelectInstrumentSouth", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_StartPause = m_Player.FindAction("StartPause", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_SelectInstrumentNorth;
        private readonly InputAction m_Player_SelectInstrumentSouth;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_StartPause;
        public struct PlayerActions
        {
            private @BeatRootActions m_Wrapper;
            public PlayerActions(@BeatRootActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectInstrumentNorth => m_Wrapper.m_Player_SelectInstrumentNorth;
            public InputAction @SelectInstrumentSouth => m_Wrapper.m_Player_SelectInstrumentSouth;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @StartPause => m_Wrapper.m_Player_StartPause;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @SelectInstrumentNorth.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentNorth;
                    @SelectInstrumentNorth.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentNorth;
                    @SelectInstrumentNorth.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentNorth;
                    @SelectInstrumentSouth.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentSouth;
                    @SelectInstrumentSouth.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentSouth;
                    @SelectInstrumentSouth.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectInstrumentSouth;
                    @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @StartPause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartPause;
                    @StartPause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartPause;
                    @StartPause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartPause;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @SelectInstrumentNorth.started += instance.OnSelectInstrumentNorth;
                    @SelectInstrumentNorth.performed += instance.OnSelectInstrumentNorth;
                    @SelectInstrumentNorth.canceled += instance.OnSelectInstrumentNorth;
                    @SelectInstrumentSouth.started += instance.OnSelectInstrumentSouth;
                    @SelectInstrumentSouth.performed += instance.OnSelectInstrumentSouth;
                    @SelectInstrumentSouth.canceled += instance.OnSelectInstrumentSouth;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @StartPause.started += instance.OnStartPause;
                    @StartPause.performed += instance.OnStartPause;
                    @StartPause.canceled += instance.OnStartPause;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnSelectInstrumentNorth(InputAction.CallbackContext context);
            void OnSelectInstrumentSouth(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnStartPause(InputAction.CallbackContext context);
        }
    }
}
